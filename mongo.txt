> use fomalhaut-orders
switched to db fomalhaut-orders
> //1.Create a collection named orders.
> db.createCollection('orders');
{ "ok" : 1 }
 var orders = db.orders;

//2.Insert at least 3 documents that represent an order. 
IMPORTANT: See section below for fields. Order dates should be: 
2017-02-03, 2017-04-04, 2017-01-02
> orders.insert({orderDate: new Date('2017-02-03'), orderTotal: 0 , lineItems: [ {unitPrice: 0 , quantity: 0, productName: ''}]})
WriteResult({ "nInserted" : 1 })
> orders.insert({orderDate: new Date('2017-04-04'), orderTotal: 0 , lineItems: [ {unitPrice: 0 , quantity: 0, productName: ''}]})
WriteResult({ "nInserted" : 1 })
> orders.insert({orderDate: new Date('2017-01-02'), orderTotal: 0 , lineItems: [ {unitPrice: 0 , quantity: 0, productName: ''}]})
WriteResult({ "nInserted" : 1 })

> //3.  Find all orders and make them look pretty.
> 
> orders.find().pretty()
{
	"_id" : ObjectId("5a6938a02cc2fe42e4e71dae"),
	"orderDate" : ISODate("2017-02-03T00:00:00Z"),
	"orderTotal" : 0,
	"lineItems" : [
		{
			"unitPrice" : 0,
			"quantity" : 0,
			"productName" : ""
		}
	]
}
{
	"_id" : ObjectId("5a6938c22cc2fe42e4e71daf"),
	"orderDate" : ISODate("2017-04-04T00:00:00Z"),
	"orderTotal" : 0,
	"lineItems" : [
		{
			"unitPrice" : 0,
			"quantity" : 0,
			"productName" : ""
		}
	]
}
{
	"_id" : ObjectId("5a6938e32cc2fe42e4e71db0"),
	"orderDate" : ISODate("2017-01-02T00:00:00Z"),
	"orderTotal" : 0,
	"lineItems" : [
		{
			"unitPrice" : 0,
			"quantity" : 0,
			"productName" : ""
		}
	]
}

//4. Find all orders with an orderDate that is after 1/31/2017.
> orders.find( { orderDate : { $gt: new Date ( '2017-01-31') } } ).pretty()
{
	"_id" : ObjectId("5a6938a02cc2fe42e4e71dae"),
	"orderDate" : ISODate("2017-02-03T00:00:00Z"),
	"orderTotal" : 0,
	"lineItems" : [
		{
			"unitPrice" : 0,
			"quantity" : 0,
			"productName" : ""
		}
	]
}
{
	"_id" : ObjectId("5a6938c22cc2fe42e4e71daf"),
	"orderDate" : ISODate("2017-04-04T00:00:00Z"),
	"orderTotal" : 0,
	"lineItems" : [
		{
			"unitPrice" : 0,
			"quantity" : 0,
			"productName" : ""
		}
	]
}

> //5. Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
> 
> orders.updateOne( { orderDate:new Date('2017-02-03') },  { $set: { orderTotal:'63' }})
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

//6.   Add another lineItem to the order from 4/4/2017
> orders.update( { orderDate: new Date('2017-04-04') }, {$push: { lineItems: { unitPrice: 3, quantity: 3, productName: "mongo" }}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> //7.Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
> 
> orders.update(
...     { orderDate: new Date('2017-01-02') },
...      {$set: 
...         { lineItems: 
...             { unitPrice: 3, quantity: 3, productName: '2 transistor radios' }}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> //8.   Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $elemMatch
> 
> orders.find(
...    { lineItems: { $elemMatch: { quantity: {$gt: 2 , $lt: 10}}}}


